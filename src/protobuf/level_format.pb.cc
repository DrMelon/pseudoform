// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "level_format.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace levelFormat {

namespace {

const ::google::protobuf::Descriptor* vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* quat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quat_reflection_ = NULL;
const ::google::protobuf::Descriptor* genericPropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  genericPropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* portalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  portalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* triggerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  triggerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  level_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_level_5fformat_2eproto() {
  protobuf_AddDesc_level_5fformat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "level_format.proto");
  GOOGLE_CHECK(file != NULL);
  vec3_descriptor_ = file->message_type(0);
  static const int vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, z_),
  };
  vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vec3_descriptor_,
      vec3::default_instance_,
      vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vec3));
  quat_descriptor_ = file->message_type(1);
  static const int quat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quat, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quat, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quat, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quat, w_),
  };
  quat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quat_descriptor_,
      quat::default_instance_,
      quat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quat));
  genericPropInfo_descriptor_ = file->message_type(2);
  static const int genericPropInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, collidable_),
  };
  genericPropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      genericPropInfo_descriptor_,
      genericPropInfo::default_instance_,
      genericPropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(genericPropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(genericPropInfo));
  portalInfo_descriptor_ = file->message_type(3);
  static const int portalInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(portalInfo, connection_),
  };
  portalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      portalInfo_descriptor_,
      portalInfo::default_instance_,
      portalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(portalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(portalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(portalInfo));
  triggerInfo_descriptor_ = file->message_type(4);
  static const int triggerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triggerInfo, on_enter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triggerInfo, on_exit_),
  };
  triggerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      triggerInfo_descriptor_,
      triggerInfo::default_instance_,
      triggerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triggerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triggerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(triggerInfo));
  entity_descriptor_ = file->message_type(5);
  static const int entity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entity, generic_prop_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entity, portal_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entity, trigger_info_),
  };
  entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entity_descriptor_,
      entity::default_instance_,
      entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entity));
  level_descriptor_ = file->message_type(6);
  static const int level_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level, entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level, script_),
  };
  level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      level_descriptor_,
      level::default_instance_,
      level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(level));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_level_5fformat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vec3_descriptor_, &vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quat_descriptor_, &quat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    genericPropInfo_descriptor_, &genericPropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    portalInfo_descriptor_, &portalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    triggerInfo_descriptor_, &triggerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entity_descriptor_, &entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    level_descriptor_, &level::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_level_5fformat_2eproto() {
  delete vec3::default_instance_;
  delete vec3_reflection_;
  delete quat::default_instance_;
  delete quat_reflection_;
  delete genericPropInfo::default_instance_;
  delete genericPropInfo_reflection_;
  delete portalInfo::default_instance_;
  delete portalInfo_reflection_;
  delete triggerInfo::default_instance_;
  delete triggerInfo_reflection_;
  delete entity::default_instance_;
  delete entity_reflection_;
  delete level::default_instance_;
  delete level_reflection_;
}

void protobuf_AddDesc_level_5fformat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022level_format.proto\022\013levelFormat\"\'\n\004vec"
    "3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"2\n\004qu"
    "at\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w"
    "\030\004 \001(\002\"\257\001\n\017genericPropInfo\022\016\n\006script\030\001 \001"
    "(\t\022#\n\010position\030\002 \001(\0132\021.levelFormat.vec3\022"
    "#\n\010rotation\030\003 \001(\0132\021.levelFormat.quat\022 \n\005"
    "scale\030\004 \001(\0132\021.levelFormat.vec3\022\014\n\004mass\030\005"
    " \001(\002\022\022\n\ncollidable\030\006 \001(\010\" \n\nportalInfo\022\022"
    "\n\nconnection\030\001 \001(\t\"0\n\013triggerInfo\022\020\n\010on_"
    "enter\030\001 \001(\t\022\017\n\007on_exit\030\002 \001(\t\"\273\001\n\006entity\022"
    "\014\n\004type\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\0227\n\021generic_p"
    "rop_info\030\003 \001(\0132\034.levelFormat.genericProp"
    "Info\022,\n\013portal_info\030\004 \001(\0132\027.levelFormat."
    "portalInfo\022.\n\014trigger_info\030\005 \001(\0132\030.level"
    "Format.triggerInfo\">\n\005level\022%\n\010entities\030"
    "\001 \003(\0132\023.levelFormat.entity\022\016\n\006script\030\002 \001"
    "(\t", 642);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "level_format.proto", &protobuf_RegisterTypes);
  vec3::default_instance_ = new vec3();
  quat::default_instance_ = new quat();
  genericPropInfo::default_instance_ = new genericPropInfo();
  portalInfo::default_instance_ = new portalInfo();
  triggerInfo::default_instance_ = new triggerInfo();
  entity::default_instance_ = new entity();
  level::default_instance_ = new level();
  vec3::default_instance_->InitAsDefaultInstance();
  quat::default_instance_->InitAsDefaultInstance();
  genericPropInfo::default_instance_->InitAsDefaultInstance();
  portalInfo::default_instance_->InitAsDefaultInstance();
  triggerInfo::default_instance_->InitAsDefaultInstance();
  entity::default_instance_->InitAsDefaultInstance();
  level::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_level_5fformat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_level_5fformat_2eproto {
  StaticDescriptorInitializer_level_5fformat_2eproto() {
    protobuf_AddDesc_level_5fformat_2eproto();
  }
} static_descriptor_initializer_level_5fformat_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int vec3::kXFieldNumber;
const int vec3::kYFieldNumber;
const int vec3::kZFieldNumber;
#endif  // !_MSC_VER

vec3::vec3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vec3::InitAsDefaultInstance() {
}

vec3::vec3(const vec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vec3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vec3::~vec3() {
  SharedDtor();
}

void vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vec3_descriptor_;
}

const vec3& vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fformat_2eproto();  return *default_instance_;
}

vec3* vec3::default_instance_ = NULL;

vec3* vec3::New() const {
  return new vec3;
}

void vec3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vec3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vec3::MergeFrom(const vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec3::CopyFrom(const vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec3::IsInitialized() const {
  
  return true;
}

void vec3::Swap(vec3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vec3_descriptor_;
  metadata.reflection = vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int quat::kXFieldNumber;
const int quat::kYFieldNumber;
const int quat::kZFieldNumber;
const int quat::kWFieldNumber;
#endif  // !_MSC_VER

quat::quat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void quat::InitAsDefaultInstance() {
}

quat::quat(const quat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void quat::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quat::~quat() {
  SharedDtor();
}

void quat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void quat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quat_descriptor_;
}

const quat& quat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fformat_2eproto();  return *default_instance_;
}

quat* quat::default_instance_ = NULL;

quat* quat::New() const {
  return new quat;
}

void quat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }
      
      // optional float w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void quat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  // optional float w = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* quat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  // optional float w = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int quat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
    // optional float w = 4;
    if (has_w()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quat::MergeFrom(const quat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_z(from.z());
    }
    if (from._has_bit(3)) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quat::CopyFrom(const quat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quat::IsInitialized() const {
  
  return true;
}

void quat::Swap(quat* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quat_descriptor_;
  metadata.reflection = quat_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string genericPropInfo::_default_script_;
#ifndef _MSC_VER
const int genericPropInfo::kScriptFieldNumber;
const int genericPropInfo::kPositionFieldNumber;
const int genericPropInfo::kRotationFieldNumber;
const int genericPropInfo::kScaleFieldNumber;
const int genericPropInfo::kMassFieldNumber;
const int genericPropInfo::kCollidableFieldNumber;
#endif  // !_MSC_VER

genericPropInfo::genericPropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void genericPropInfo::InitAsDefaultInstance() {
  position_ = const_cast< ::levelFormat::vec3*>(&::levelFormat::vec3::default_instance());
  rotation_ = const_cast< ::levelFormat::quat*>(&::levelFormat::quat::default_instance());
  scale_ = const_cast< ::levelFormat::vec3*>(&::levelFormat::vec3::default_instance());
}

genericPropInfo::genericPropInfo(const genericPropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void genericPropInfo::SharedCtor() {
  _cached_size_ = 0;
  script_ = const_cast< ::std::string*>(&_default_script_);
  position_ = NULL;
  rotation_ = NULL;
  scale_ = NULL;
  mass_ = 0;
  collidable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

genericPropInfo::~genericPropInfo() {
  SharedDtor();
}

void genericPropInfo::SharedDtor() {
  if (script_ != &_default_script_) {
    delete script_;
  }
  if (this != default_instance_) {
    delete position_;
    delete rotation_;
    delete scale_;
  }
}

void genericPropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* genericPropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return genericPropInfo_descriptor_;
}

const genericPropInfo& genericPropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fformat_2eproto();  return *default_instance_;
}

genericPropInfo* genericPropInfo::default_instance_ = NULL;

genericPropInfo* genericPropInfo::New() const {
  return new genericPropInfo;
}

void genericPropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (script_ != &_default_script_) {
        script_->clear();
      }
    }
    if (_has_bit(1)) {
      if (position_ != NULL) position_->::levelFormat::vec3::Clear();
    }
    if (_has_bit(2)) {
      if (rotation_ != NULL) rotation_->::levelFormat::quat::Clear();
    }
    if (_has_bit(3)) {
      if (scale_ != NULL) scale_->::levelFormat::vec3::Clear();
    }
    mass_ = 0;
    collidable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool genericPropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string script = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .levelFormat.vec3 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rotation;
        break;
      }
      
      // optional .levelFormat.quat rotation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scale;
        break;
      }
      
      // optional .levelFormat.vec3 scale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_mass;
        break;
      }
      
      // optional float mass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_collidable;
        break;
      }
      
      // optional bool collidable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collidable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collidable_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void genericPropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string script = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->script(), output);
  }
  
  // optional .levelFormat.vec3 position = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // optional .levelFormat.quat rotation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rotation(), output);
  }
  
  // optional .levelFormat.vec3 scale = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scale(), output);
  }
  
  // optional float mass = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mass(), output);
  }
  
  // optional bool collidable = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->collidable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* genericPropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string script = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->script(), target);
  }
  
  // optional .levelFormat.vec3 position = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // optional .levelFormat.quat rotation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rotation(), target);
  }
  
  // optional .levelFormat.vec3 scale = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scale(), target);
  }
  
  // optional float mass = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mass(), target);
  }
  
  // optional bool collidable = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->collidable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int genericPropInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string script = 1;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }
    
    // optional .levelFormat.vec3 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional .levelFormat.quat rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }
    
    // optional .levelFormat.vec3 scale = 4;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }
    
    // optional float mass = 5;
    if (has_mass()) {
      total_size += 1 + 4;
    }
    
    // optional bool collidable = 6;
    if (has_collidable()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void genericPropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const genericPropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const genericPropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void genericPropInfo::MergeFrom(const genericPropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_script(from.script());
    }
    if (from._has_bit(1)) {
      mutable_position()->::levelFormat::vec3::MergeFrom(from.position());
    }
    if (from._has_bit(2)) {
      mutable_rotation()->::levelFormat::quat::MergeFrom(from.rotation());
    }
    if (from._has_bit(3)) {
      mutable_scale()->::levelFormat::vec3::MergeFrom(from.scale());
    }
    if (from._has_bit(4)) {
      set_mass(from.mass());
    }
    if (from._has_bit(5)) {
      set_collidable(from.collidable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void genericPropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void genericPropInfo::CopyFrom(const genericPropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool genericPropInfo::IsInitialized() const {
  
  return true;
}

void genericPropInfo::Swap(genericPropInfo* other) {
  if (other != this) {
    std::swap(script_, other->script_);
    std::swap(position_, other->position_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(mass_, other->mass_);
    std::swap(collidable_, other->collidable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata genericPropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = genericPropInfo_descriptor_;
  metadata.reflection = genericPropInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string portalInfo::_default_connection_;
#ifndef _MSC_VER
const int portalInfo::kConnectionFieldNumber;
#endif  // !_MSC_VER

portalInfo::portalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void portalInfo::InitAsDefaultInstance() {
}

portalInfo::portalInfo(const portalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void portalInfo::SharedCtor() {
  _cached_size_ = 0;
  connection_ = const_cast< ::std::string*>(&_default_connection_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

portalInfo::~portalInfo() {
  SharedDtor();
}

void portalInfo::SharedDtor() {
  if (connection_ != &_default_connection_) {
    delete connection_;
  }
  if (this != default_instance_) {
  }
}

void portalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* portalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return portalInfo_descriptor_;
}

const portalInfo& portalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fformat_2eproto();  return *default_instance_;
}

portalInfo* portalInfo::default_instance_ = NULL;

portalInfo* portalInfo::New() const {
  return new portalInfo;
}

void portalInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (connection_ != &_default_connection_) {
        connection_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool portalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string connection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connection().data(), this->connection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void portalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string connection = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection().data(), this->connection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->connection(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* portalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string connection = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection().data(), this->connection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->connection(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int portalInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string connection = 1;
    if (has_connection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void portalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const portalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const portalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void portalInfo::MergeFrom(const portalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_connection(from.connection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void portalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void portalInfo::CopyFrom(const portalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool portalInfo::IsInitialized() const {
  
  return true;
}

void portalInfo::Swap(portalInfo* other) {
  if (other != this) {
    std::swap(connection_, other->connection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata portalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = portalInfo_descriptor_;
  metadata.reflection = portalInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string triggerInfo::_default_on_enter_;
const ::std::string triggerInfo::_default_on_exit_;
#ifndef _MSC_VER
const int triggerInfo::kOnEnterFieldNumber;
const int triggerInfo::kOnExitFieldNumber;
#endif  // !_MSC_VER

triggerInfo::triggerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void triggerInfo::InitAsDefaultInstance() {
}

triggerInfo::triggerInfo(const triggerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void triggerInfo::SharedCtor() {
  _cached_size_ = 0;
  on_enter_ = const_cast< ::std::string*>(&_default_on_enter_);
  on_exit_ = const_cast< ::std::string*>(&_default_on_exit_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

triggerInfo::~triggerInfo() {
  SharedDtor();
}

void triggerInfo::SharedDtor() {
  if (on_enter_ != &_default_on_enter_) {
    delete on_enter_;
  }
  if (on_exit_ != &_default_on_exit_) {
    delete on_exit_;
  }
  if (this != default_instance_) {
  }
}

void triggerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* triggerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return triggerInfo_descriptor_;
}

const triggerInfo& triggerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fformat_2eproto();  return *default_instance_;
}

triggerInfo* triggerInfo::default_instance_ = NULL;

triggerInfo* triggerInfo::New() const {
  return new triggerInfo;
}

void triggerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (on_enter_ != &_default_on_enter_) {
        on_enter_->clear();
      }
    }
    if (_has_bit(1)) {
      if (on_exit_ != &_default_on_exit_) {
        on_exit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool triggerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string on_enter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_enter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->on_enter().data(), this->on_enter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_on_exit;
        break;
      }
      
      // optional string on_exit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_on_exit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_exit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->on_exit().data(), this->on_exit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void triggerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string on_enter = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->on_enter().data(), this->on_enter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->on_enter(), output);
  }
  
  // optional string on_exit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->on_exit().data(), this->on_exit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->on_exit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* triggerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string on_enter = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->on_enter().data(), this->on_enter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->on_enter(), target);
  }
  
  // optional string on_exit = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->on_exit().data(), this->on_exit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->on_exit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int triggerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string on_enter = 1;
    if (has_on_enter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->on_enter());
    }
    
    // optional string on_exit = 2;
    if (has_on_exit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->on_exit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void triggerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const triggerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const triggerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void triggerInfo::MergeFrom(const triggerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_on_enter(from.on_enter());
    }
    if (from._has_bit(1)) {
      set_on_exit(from.on_exit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void triggerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void triggerInfo::CopyFrom(const triggerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool triggerInfo::IsInitialized() const {
  
  return true;
}

void triggerInfo::Swap(triggerInfo* other) {
  if (other != this) {
    std::swap(on_enter_, other->on_enter_);
    std::swap(on_exit_, other->on_exit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata triggerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = triggerInfo_descriptor_;
  metadata.reflection = triggerInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string entity::_default_name_;
#ifndef _MSC_VER
const int entity::kTypeFieldNumber;
const int entity::kNameFieldNumber;
const int entity::kGenericPropInfoFieldNumber;
const int entity::kPortalInfoFieldNumber;
const int entity::kTriggerInfoFieldNumber;
#endif  // !_MSC_VER

entity::entity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entity::InitAsDefaultInstance() {
  generic_prop_info_ = const_cast< ::levelFormat::genericPropInfo*>(&::levelFormat::genericPropInfo::default_instance());
  portal_info_ = const_cast< ::levelFormat::portalInfo*>(&::levelFormat::portalInfo::default_instance());
  trigger_info_ = const_cast< ::levelFormat::triggerInfo*>(&::levelFormat::triggerInfo::default_instance());
}

entity::entity(const entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entity::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  generic_prop_info_ = NULL;
  portal_info_ = NULL;
  trigger_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entity::~entity() {
  SharedDtor();
}

void entity::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete generic_prop_info_;
    delete portal_info_;
    delete trigger_info_;
  }
}

void entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entity_descriptor_;
}

const entity& entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fformat_2eproto();  return *default_instance_;
}

entity* entity::default_instance_ = NULL;

entity* entity::New() const {
  return new entity;
}

void entity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (generic_prop_info_ != NULL) generic_prop_info_->::levelFormat::genericPropInfo::Clear();
    }
    if (_has_bit(3)) {
      if (portal_info_ != NULL) portal_info_->::levelFormat::portalInfo::Clear();
    }
    if (_has_bit(4)) {
      if (trigger_info_ != NULL) trigger_info_->::levelFormat::triggerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_generic_prop_info;
        break;
      }
      
      // optional .levelFormat.genericPropInfo generic_prop_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generic_prop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_prop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_portal_info;
        break;
      }
      
      // optional .levelFormat.portalInfo portal_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portal_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portal_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_trigger_info;
        break;
      }
      
      // optional .levelFormat.triggerInfo trigger_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trigger_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .levelFormat.genericPropInfo generic_prop_info = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->generic_prop_info(), output);
  }
  
  // optional .levelFormat.portalInfo portal_info = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->portal_info(), output);
  }
  
  // optional .levelFormat.triggerInfo trigger_info = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trigger_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .levelFormat.genericPropInfo generic_prop_info = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->generic_prop_info(), target);
  }
  
  // optional .levelFormat.portalInfo portal_info = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->portal_info(), target);
  }
  
  // optional .levelFormat.triggerInfo trigger_info = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trigger_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .levelFormat.genericPropInfo generic_prop_info = 3;
    if (has_generic_prop_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generic_prop_info());
    }
    
    // optional .levelFormat.portalInfo portal_info = 4;
    if (has_portal_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portal_info());
    }
    
    // optional .levelFormat.triggerInfo trigger_info = 5;
    if (has_trigger_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trigger_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entity::MergeFrom(const entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      mutable_generic_prop_info()->::levelFormat::genericPropInfo::MergeFrom(from.generic_prop_info());
    }
    if (from._has_bit(3)) {
      mutable_portal_info()->::levelFormat::portalInfo::MergeFrom(from.portal_info());
    }
    if (from._has_bit(4)) {
      mutable_trigger_info()->::levelFormat::triggerInfo::MergeFrom(from.trigger_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entity::CopyFrom(const entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entity::IsInitialized() const {
  
  return true;
}

void entity::Swap(entity* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(generic_prop_info_, other->generic_prop_info_);
    std::swap(portal_info_, other->portal_info_);
    std::swap(trigger_info_, other->trigger_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entity_descriptor_;
  metadata.reflection = entity_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string level::_default_script_;
#ifndef _MSC_VER
const int level::kEntitiesFieldNumber;
const int level::kScriptFieldNumber;
#endif  // !_MSC_VER

level::level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void level::InitAsDefaultInstance() {
}

level::level(const level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void level::SharedCtor() {
  _cached_size_ = 0;
  script_ = const_cast< ::std::string*>(&_default_script_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

level::~level() {
  SharedDtor();
}

void level::SharedDtor() {
  if (script_ != &_default_script_) {
    delete script_;
  }
  if (this != default_instance_) {
  }
}

void level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return level_descriptor_;
}

const level& level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_level_5fformat_2eproto();  return *default_instance_;
}

level* level::default_instance_ = NULL;

level* level::New() const {
  return new level;
}

void level::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (script_ != &_default_script_) {
        script_->clear();
      }
    }
  }
  entities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .levelFormat.entity entities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entities;
        if (input->ExpectTag(18)) goto parse_script;
        break;
      }
      
      // optional string script = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .levelFormat.entity entities = 1;
  for (int i = 0; i < this->entities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }
  
  // optional string script = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->script(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .levelFormat.entity entities = 1;
  for (int i = 0; i < this->entities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entities(i), target);
  }
  
  // optional string script = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->script(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int level::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string script = 2;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }
    
  }
  // repeated .levelFormat.entity entities = 1;
  total_size += 1 * this->entities_size();
  for (int i = 0; i < this->entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void level::MergeFrom(const level& from) {
  GOOGLE_CHECK_NE(&from, this);
  entities_.MergeFrom(from.entities_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_script(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void level::CopyFrom(const level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool level::IsInitialized() const {
  
  return true;
}

void level::Swap(level* other) {
  if (other != this) {
    entities_.Swap(&other->entities_);
    std::swap(script_, other->script_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = level_descriptor_;
  metadata.reflection = level_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace levelFormat

// @@protoc_insertion_point(global_scope)
